[dependency-groups]
dev = [
  "Faker>=37.1.0,<38",
  "commitizen>=4.5.0,<5",
  "coveralls>=4.0.1,<5",
  "daphne>=4.1.2,<5",
  "django-debug-toolbar>=5.1.0,<6",
  "factory-boy>=3.3.3,<4",
  "freezegun>=1.5.1,<2",
  "ipython>=8.35.0",
  "mock>=5.2.0,<6",
  "pytest-cov>=6.1.1,<7",
  "pytest-django>=4.11.1,<5",
  "pytest-mock>=3.14.0,<4",
  "pytest-xdist>=3.6.1,<4"
]
lint = [
  "black>=25.1.0,<26",
  "channels-stubs",
  "django-stubs[compatible-mypy]>=5.1.0",
  "djangorestframework-stubs[compatible-mypy]>=3.16.0",
  "mypy>=1.15.0",
  "pre-commit>=3.4.0,<4.0.0",
  "pyright[nodejs]>=1.1.400,<2",
  "ruff>=0.11.3,<0.12",
  "toml-sort>=0.24.2,<0.25"
]

[project]
authors = [{email = "danghuy1999@gmail.com", name = "Huy Nguyen"}]
classifiers = [
  "Environment :: Web Environment",
  "Framework :: Django",
  "Intended Audience :: Developers",
  "Intended Audience :: Information Technology",
  "Operating System :: OS Independent",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.9",
  "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
  "Topic :: Internet :: WWW/HTTP",
  "Topic :: Software Development"
]
dependencies = [
  "Django>=5.1,<6",
  "celery>=5.5.0,<6",
  "channels-redis>=4.2.1,<5",
  "channels>=4.2.2,<5",
  "chanx[camel-case]>=0.9.0",
  "dj-rest-auth[with-social]>=7.0.1,<8",
  "django-anymail>=13.0,<14",
  "django-celery-beat>=2.7.0,<3",
  "django-cleanup>=9.0.0,<10",
  "django-cors-headers>=4.7.0,<5",
  "django-extensions>=3.2.3,<4",
  "django-filter>=25.1,<26",
  "django-storages>=1.14.6,<2",
  "django-structlog>=9.1.0,<10",
  "django-stubs-ext>=5.1,<6",
  "djangorestframework-camel-case>=1.4.2,<2",
  "djangorestframework-simplejwt>=5.5.0,<6",
  "djangorestframework>=3.16.0,<4",
  "drf-nested-routers>=0.94.1,<1",
  "drf-spectacular>=0.28.0,<1",
  "drf-standardized-errors>=0.14.1,<1",
  "environs>=14.1.1,<15",
  "gunicorn[gevent]>=23.0.0,<24",
  "langchain-community>=0.3.5,<1.0",
  "langchain-openai>=0.2.10,<1.0",
  "langchain>=0.3.0,<1.0",
  "psycopg-pool>=3.2.6,<4",
  "psycopg[binary]>=3.2.6,<4",
  "redis[hiredis]>=5.2.1,<6",
  "structlog>=25.2.0,<26",
  "uvicorn[standard]>=0.34.0,<1",
  "whitenoise>=6.9.0,<7"
]
description = "Full examples for chanx package usability"
license = {file = "LICENSE"}
name = "chanx_example"
readme = "README.md"
requires-python = ">=3.10,<4.0"
version = "0.0.1"

[project.urls]
Homepage = "https://github.com/huynguyengl99/chanx_example"
Repository = "https://github.com/huynguyengl99/chanx_example"

[tool.black]
exclude = '''
/(
    \.git
 |  \.pytest_cache
 |  \.vscode
 |  __pycache__
 |  .venv
 |  build
 |  coverage
)/
'''
line-length = 88
preview = true

[tool.commitizen]
name = "cz_conventional_commits"
tag_format = "v$version"
update_changelog_on_bump = true
version_provider = "pep621"
version_scheme = "pep440"

[tool.commitizen.customize]
bump_map = {build = "PATCH", ci = "PATCH", docs = "PATCH", feat = "MINOR", fix = "PATCH", perf = "PATCH", refactor = "PATCH"}
bump_pattern = '^(feat|fix|ci|build|perf|refactor|docs)'
schema_pattern = '^(build|ci|docs|feat|fix|perf|refactor|style|test|chore|revert|bump)(\(\S+\))?\:?\s.*'

[tool.tomlsort]
all = true
in_place = true
spaces_before_inline_comment = 2
overrides."lint.isort.section-order".inline_arrays = false

[tool.uv]
default-groups = [
  "dev",
  "lint"
]
package = false
